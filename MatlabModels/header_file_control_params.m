%     Copyright 2017-2020 Dino Spiller (dinospiller@gmail.com)
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

%     Write control parameters to c header file

%% Routines for writing parameters to (header) file
params_header_filename = '/Users/mac_daino/Documents/dino/progetto_ego/FW/MOTOR_FOC/bldc-master/filter_and_control_params.h';
params_header_file=fopen(params_header_filename,'w');
% write essentials
fprintf(params_header_file,"/*ATTENTION: this file has been automatically generated by a MATLAB script \n avoid manual changes!*/\n");
heading_string=upper(params_header_filename(find(params_header_filename=='/',1,'last')+1:length(params_header_filename)));
heading_string=strrep(heading_string,".","_");
heading_string=heading_string+'_';
fprintf(params_header_file,"#ifndef %s\n",heading_string);
fprintf(params_header_file,"#define %s\n",heading_string);
fprintf(params_header_file,"\n");
fprintf(params_header_file,"#define LOOP_PERIOD_MS %d  //[ms] loop period \n",Ts*1000);
fprintf(params_header_file,"#define N_POLES	%d	// []total poles of the motor \n",n_poles);
fprintf(params_header_file,"#define N_HALL	%d	// []number of hall sensors \n",n_hall);
fprintf(params_header_file,"#define KT	(float)%f // [Nm/A] torque per Ampere \n",kt);
fprintf(params_header_file,"#define R_WHEEL	(float)%f	// [m]wheel radius \n",r);
fprintf(params_header_file,"#define RHO	(float)%f	// [] gear reduction ratio \n",rho);
fprintf(params_header_file,"#define D	(float)%f	// [m]distance between the 2 wheels \n",D);
fprintf(params_header_file,"\n");
fprintf(params_header_file,"// Equilibrium LQR parameters \n");
fprintf(params_header_file,"#define CTL_BALANCE_XB_GAIN				(float)%f\n",Kd(1));
fprintf(params_header_file,"#define CTL_BALANCE_THETA_P_GAIN		(float)%f\n",Kd(2));
fprintf(params_header_file,"#define CTL_BALANCE_DOT_XB_GAIN			(float)%f\n",Kd(3));
fprintf(params_header_file,"#define CTL_BALANCE_DOT_THETA_P_GAIN	(float)%f\n",Kd(4));
fprintf(params_header_file,"\n");
writeSecondOrderFiltParamsToFile(params_header_file,sysHPF,"HPF");
writeFirstOrderFiltParamsToFile(params_header_file,sysIntD,"INT");
writeFirstOrderFiltParamsToFile(params_header_file,Wpi_td,"PID");
writeSecondOrderFiltParamsToFile(params_header_file,LPF_d,"LPF");
fprintf(params_header_file,"\n");
fprintf(params_header_file,"#define COMPLEM_FILT_ALPHA	(float)%f\n",alpha_c);
fprintf(params_header_file,"#define COMPLEM_FILT_BETA	(float)%f\n",beta_c);
fprintf(params_header_file,"\n");
fprintf(params_header_file,"#define LQR_STEER_DELTA_GAIN	(float)%f\n",K_steer(1));
fprintf(params_header_file,"#define LQR_STEER_DOT_DELTA_GAIN	(float)%f\n",K_steer(2));
fprintf(params_header_file,"\n");
fprintf(params_header_file,"#define IMU_ACCX_OFFSET	(float)%f\n",imu_accx_offset);
fprintf(params_header_file,"#define IMU_ACCZ_OFFSET	(float)%f\n",imu_accz_offset);
fprintf(params_header_file,"#define IMU_GYRO_OFFSET	(float)%f\n",imu_gyro_offset);
fprintf(params_header_file,"\n");
fprintf(params_header_file,"// Backlash compensator\n");
fprintf(params_header_file,"#define DIST_TORQUE_AMPL	(float)%f\n",dist_torque_ampl);
fprintf(params_header_file,"#define DIST_TORQUE_OMEGA	(float)%f\n",omega_notch);
writeSecondOrderFiltParamsToFile(params_header_file,filt_notch_d,"NOTCH");
fprintf(params_header_file,"#endif // %s\n",heading_string);
fclose(params_header_file);

function [result] = writeFirstOrderFiltParamsToFile(file_to_write,filter,filterName)
    [num_filt den_filt]= tfdata(filter, 'v');
    fprintf(file_to_write,'// First order filter \"%s\"\n',filterName);
    fprintf(file_to_write,"#define %s_COEF_N0 (float)%f\n",filterName,num_filt(1));
    fprintf(file_to_write,"#define %s_COEF_N1 (float)%f\n",filterName,num_filt(2));
    fprintf(file_to_write,"#define %s_COEF_D1 (float)%f\n",filterName,den_filt(2));
    fprintf(file_to_write,"\n");
end

function [result] = writeSecondOrderFiltParamsToFile(file_to_write,filter,filterName)
    [num_filt den_filt]= tfdata(filter, 'v');
    fprintf(file_to_write,'// Second order filter \"%s\"\n',filterName);
    fprintf(file_to_write,"#define %s_COEF_N0 (float)%f\n",filterName,num_filt(1));
    fprintf(file_to_write,"#define %s_COEF_N1 (float)%f\n",filterName,num_filt(2));
    fprintf(file_to_write,"#define %s_COEF_N2 (float)%f\n",filterName,num_filt(3));
    fprintf(file_to_write,"#define %s_COEF_D1 (float)%f\n",filterName,den_filt(2));
    fprintf(file_to_write,"#define %s_COEF_D2 (float)%f\n",filterName,den_filt(3));
    fprintf(file_to_write,"\n");
end
